#!/bin/sh

# Exit on error
#set -x

# create needed folder for letsencrypt initial setup files
[ -d /config/letsencrypt/ ] || mkdir -p /config/letsencrypt/

# if its not already created, create cronjob for LE
if [ ! -f "/etc/cron.monthly/letsrenew.sh" ]
then
        ln -sf /config/letsencrypt/letsrenew.sh /etc/cron.monthly/letsrenew.sh
fi

# start with permissions, ignore errors
chmod 755 /config/letsencrypt/install_once.sh
chmod 755 /config/letsencrypt/acme_tiny.py
chmod 755 /config/letsencrypt/letsrenew.sh
chmod 755 /config/letsencrypt/repair.sh
chmod 755 /config/scripts/post-config.d/install_letsencrypt.sh
chmod 755 /config/custom/bin/ip2dns

# hosts to check for online status
v4iphost='8.8.8.8'
v4dnshost='www.google.com'
v6iphost='2001:4860:4860::8888'
v6dnshost='www.google.com'

# function to check if connectivity is given to download packages (script from vchrizz)
onlinecheck () {
    ping="ping -c 1 -W 1 ";
    ping6="ping6 -c 1 -W 1 ";
    $ping $v4iphost 2> /dev/null
    if [[ $? == 0 ]]; then
        # ipv4 ok
        $ping6 $v6iphost > /dev/null
        if [[ $? == 0 ]]; then
            # ipv6 ok
            $ping6 $v6dnshost > /dev/null
            if [[ $? == 0 ]]; then
                # ipv6dns ok
                return 0
            else
                # ipv6dns not ok
                return 1
            fi
        else
            # ipv6 not ok, fallback to ipv4
            # issue: dns resolver prefers v6 (if ipv6 is configured)
            $ping $v4dnshost > /dev/null
            if [[ $? == 0 ]]; then
                # ipv4dns ok
                return 0
            else
                # ipv4dns not ok
                return 1
            fi
        fi
    else
        # ipv4 not ok
        return 1
    fi
}

if [ ! -d "/var/log/lighttpd_custom" ]
then
    mkdir /var/log/lighttpd_custom
    chown www-data:www-data /var/log/lighttpd_custom
fi

# overwrite existing server.pem with original...
chmod +w /etc/lighttpd/server.pem
cp /config/letsencrypt/original_server.pem /etc/lighttpd/server.pem

# start custom script webserver, if default webserver is not configured to run on port 80...
if [ $(grep "https-port 443" /config/config.boot | wc -l) -eq 0 ]
then
        sudo /sbin/start-stop-daemon --start --quiet \
                --pidfile /var/run/lighttpd_custom.pid \
                --exec /usr/sbin/lighttpd -- -f /config/custom/lighttpd/lighttpd_custom.conf
fi

# start original EdgeOS webserver
sudo /sbin/start-stop-daemon --start --quiet \
        --pidfile /var/run/lighttpd.pid \
        --exec /usr/sbin/lighttpd -- -f /etc/lighttpd/lighttpd.conf

# to get the cert, you must have internet access and the custom webserver - does not work with the stock webserver from EdgeOS!
if [ $(grep "https-port 443" /config/config.boot | wc -l) -eq 0 ]
then
        onlinecheck
        if [[ $? == 0 ]]; then
                if [ ! -s "/config/letsencrypt/account.key" ]
                then
                        openssl genrsa 4096 | tee /config/letsencrypt/account.key
                fi
                if [ ! -s "/config/letsencrypt/domain.key" ]
                then
                        openssl genrsa 4096 | tee /config/letsencrypt/domain.key
                fi
                # read activated PublicIP from OLSR Daemon
                # it works only if txtinfo Plugin is activated in the OLSR Wizard!
                PUBLICIP=$(echo $(curl -s -o- http://127.0.0.1:2006/interfaces | head -n3 | tail -n1 | awk {'print $5'}) | /config/custom/bin/ip2dns | awk {'print $2'} | sed -e s/dns.//)
                # correctly register csr file
                openssl req -new -sha256 -key /config/letsencrypt/domain.key -subj "/CN=$PUBLICIP" | tee /config/letsencrypt/domain.csr

                # Run letsrenew.sh file for initial connect and/or renewal, doesn't matter
                bash /config/letsencrypt/letsrenew.sh
        fi
fi

exit 0
