#!/bin/sh

# Exit on error
#set -x

echo "Preparing files and directories..."
# create needed folder for letsencrypt initial setup files
[ -d /config/letsencrypt/ ] || mkdir -p /config/letsencrypt/

# if its not already created, create cronjob for LE
if [ ! -f "/etc/cron.monthly/letsrenew.sh" ]; then
        ln -sf /config/letsencrypt/letsrenew.sh /etc/cron.monthly/letsrenew.sh
fi

# start with permissions, ignore errors
chmod 755 /config/letsencrypt/acme_tiny.py
chmod 755 /config/letsencrypt/letsrenew.sh
chmod 755 /config/letsencrypt/repair.sh
chmod 755 /config/scripts/port_81.sh
chmod 755 /config/scripts/port_8443.sh
chmod 755 /config/custom/bin/ip2dns

# change original webserver http-port from 80 to 81
if [ $(grep "http-port 80" /config/config.boot | wc -l) -eq 1 ]; then
    echo "Changing http-port from 80 to 81..."
    /config/scripts/port_81.sh
fi
# change original webserver https-port from 443 to 8443
# CPO: really needed? acme-chellange and cgi-status.php could be served without https:443 as well.
# custom-https-port is configured in /config/custom/lighttpd/conf-enabled/10-ssl.conf in following lines (3x: ipv4, ipv6, url.redirect)
# $SERVER["socket"] == "0.0.0.0:443" {
# $SERVER["socket"] == "[0::0]:443" {
#                         "^(.*)$" => "https://%1:443$1"
#
# on order to allow original webserver to stay on port 443, all 3 lines on custom 10-ssl.conf need to be changed to i.e. to port 8443.
if [ $(grep "https-port 443" /config/config.boot | wc -l) -eq 1 ]; then
    echo "Changing https-port from 443 to 8443..."
    /config/scripts/port_8443.sh
fi

# hosts to check for online status
v4iphost='8.8.8.8'
v4dnshost='www.google.com'
v6iphost='2001:4860:4860::8888'
v6dnshost='www.google.com'

# function to check if connectivity is given to download packages (script from vchrizz)
onlinecheck () {
    ping="ping -c 1 -W 1 ";
    ping6="ping6 -c 1 -W 1 ";
    $ping $v4iphost 2> /dev/null
    if [[ $? == 0 ]]; then
        # ipv4 ok
        $ping6 $v6iphost > /dev/null
        if [[ $? == 0 ]]; then
            # ipv6 ok
            $ping6 $v6dnshost > /dev/null
            if [[ $? == 0 ]]; then
                # ipv6dns ok
                return 0
            else
                # ipv6dns not ok
                return 1
            fi
        else
            # ipv6 not ok, fallback to ipv4
            # issue: dns resolver prefers v6 (if ipv6 is configured)
            $ping $v4dnshost > /dev/null
            if [[ $? == 0 ]]; then
                # ipv4dns ok
                return 0
            else
                # ipv4dns not ok
                return 1
            fi
        fi
    else
        # ipv4 not ok
        return 1
    fi
}

if [ ! -d "/var/log/lighttpd_custom" ]
then
    mkdir /var/log/lighttpd_custom
    chown www-data:www-data /var/log/lighttpd_custom
fi

# overwrite existing server.pem with original
# CPO: only needed if original webserver is not running due to corrupted server.pem file
# --> try to establish a check for such a situation?
chmod +w /etc/lighttpd/server.pem
if [ -f "/config/letsencrypt/original_server.pem" ]; then
  echo "Recovering original server.pem file..."
  cp /config/letsencrypt/original_server.pem /etc/lighttpd/server.pem
fi

echo "Fire up original webserver..."
# start original EdgeOS webserver
sudo /sbin/start-stop-daemon --start --quiet \
        --pidfile /var/run/lighttpd.pid \
        --exec /usr/sbin/lighttpd -- -f /etc/lighttpd/lighttpd.conf

# to get the cert, you must have internet access and the custom webserver on ports 80/443
# does not work with the stock webserver from EdgeOS due to missing rewrite-exception for /.well-known/ directory
# CPO: improve: custom-server on port http-80, stock-server von https-443 should work as well!
if [ $(grep "https-port 443" /config/config.boot | wc -l) -eq 0 ] && [ $(grep "http-port 80" /config/config.boot | wc -l) -eq 0 ]
then
        echo "Fire up custom webserver"
        # start custom script webserver
        sudo /sbin/start-stop-daemon --start --quiet \
                --pidfile /var/run/lighttpd_custom.pid \
                --exec /usr/sbin/lighttpd -- -f /config/custom/lighttpd/lighttpd_custom.conf

        ## calculate keys of not already there (could be done offline)
        if [ ! -s "/config/letsencrypt/account.key" ]; then
                echo "Caculating account-key: this could take a minute or two..."
                openssl genrsa 4096 | tee /config/letsencrypt/account.key
        fi
        if [ ! -s "/config/letsencrypt/domain.key" ]; then
                echo "Caculating domain-key: this could take a minute or two..."
                openssl genrsa 4096 | tee /config/letsencrypt/domain.key
        fi
        echo "Perform online check..."
        onlinecheck
        if [[ $? == 0 ]]; then
                echo "Retrieving IP and FQDN..."
                
                # read activated PublicIP from OLSR Daemon (should be optimized in the future)
                if [ $(ps aux | grep olsr | grep -v grep | wc -l) -eq 0 ]; then
                        # it works only if txtinfo Plugin is activated in the OLSR Wizard!
                        PUBLICIP=$(echo $(curl -s -o- http://127.0.0.1:2006/interfaces | head -n3 | tail -n1 | awk {'print $5'}) | /config/custom/bin/ip2dns | awk {'print $2'} | sed -e s/dns.//)
                else
                        # if OLSR is not activated or not used - we get the "public" IP from the default route iface
                        PUBLICIP=$(echo $(/sbin/ifconfig $(ip r | grep default | awk {'print $5'}) | head -n2 | tail -n1 | awk {'print $2'} | sed -e s/addr://) | /config/custom/bin/ip2dns | awk {'print $2'} | sed -e s/dns.//)
                fi
                
                # correctly register csr file
                echo "Creating domain-csr..."
                openssl req -new -sha256 -key /config/letsencrypt/domain.key -subj "/CN=$PUBLICIP" | tee /config/letsencrypt/domain.csr

                # Run letsrenew.sh file for initial connect and/or renewal, doesn't matter
                echo "Starting registration procedure..."
                bash /config/letsencrypt/letsrenew.sh
                echo "Done!"
        else
                echo "NOT ONLINE: key registration not possible"
        fi
else
        echo "Custom webserver not started due to port conflicts (80/443)!"
fi

echo "postinst installation finished"

exit 0
