#!/bin/vbash
#postinst
#change ports if needed
#keep existing LE-certificates if exists
#keep cronjob for renewal if existed
#pre-calculate keys if missing

chmod 755 /config/scripts/port_81.sh
chmod 755 /config/scripts/port_81w.sh
chmod 755 /config/scripts/port_81s.sh

if [ -f /tmp/do_lighttpd_restart ]; then
    restart=$(cat /tmp/do_lighttpd_restart)
   #rm -f /tmp/do_lighttpd_restart
fi

echo "Preparing files and directories..."
# create needed folder for letsencrypt initial setup files
[ -d /config/letsencrypt/ ] || mkdir -p /config/letsencrypt/

if [ ! -d "/var/log/lighttpd_custom" ]; then
    mkdir /var/log/lighttpd_custom
    chown www-data:www-data /var/log/lighttpd_custom
fi

# re-establish renewal if needed
if [ ! -f /etc/cron.daily/letsrenew ] && [ -f /config/letsencrypt/letsrenew.sh ]; then
    echo "#!/bin/bash" >/etc/cron.daily/letsrenew
    echo "/config/letsencrypt/letsrenew.sh" >>/etc/cron.daily/letsrenew
fi
chmod 755 /etc/cron.daily/letsrenew

# re-establish daily restart script
if [ ! -f /etc/cron.daily/restartservers ] && [ -f /config/letsencrypt/restartservers.sh ]; then
    echo "#!/bin/bash" >/etc/cron.daily/restartservers
    echo "/config/letsencrypt/restartservers.sh" >>/etc/cron.daily/restartservers
fi
chmod 755 /etc/cron.daily/restartservers

# re-establish hourly AirOS fetching
if [ ! -L "/etc/cron.hourly/loopairos" ] && [ -f /config/custom/loopairos.sh ]; then
    ln -sf /config/custom/loopairos.sh /etc/cron.hourly/loopairos
fi
chmod 755 /etc/cron.hourly/loopairos

# establish config from default, if missing - avoid killing a custom setting
if [ -f "/tmp/settings.inc" ]; then
    # repair/fill up existing settings.inc with missing parameters
    sed -i "s/$traceroute_to='78.41.115.228';/$traceroute_to='78.41.115.36';/" /tmp/settings.inc
    if [ $(grep -c "\$traceroute6_to='" /tmp/settings.inc) -eq 0 ]; then
    sed -i "s/?>/\/\/ defines destination for traceroute6: should be internet gateway IPv6\n\$traceroute6_to='2a02:60:35:492:1:ffff::1';\n\n?>/" /tmp/settings.inc
    fi
    if [ $(grep -c "\$ipranges='" /tmp/settings.inc) -eq 0 ]; then
    sed -i "s/?>/\/\/ define ip-ranges to display management data in status.py: IP-IP[,IP-IP] default=3 0xFF-IP-ranges\n\$ipranges='193.238.156.0-193.238.159.255,78.41.112.0-78.41.119.255,185.194.20.0-185.194.23.255';\n\n?>/" /tmp/settings.inc
    fi
    if [ $(grep -c "\$ipaddresses='" /tmp/settings.inc) -eq 0 ]; then
    sed -i "s/?>/\/\/ define ip-addresses to display management data in status.py: IP[,IP] default none\n\$ipaddresses='';\n\n?>/" /tmp/settings.inc
    fi
    if [ $(grep -c "\$allowiphones=" /tmp/settings.inc) -eq 0 ]; then
    sed -i "s/?>/\$allowiphones=1;\n\n?>/" /tmp/settings.inc
    fi
    if [ $(grep -c "\$ubntdiscovertime=" /tmp/settings.inc) -eq 0 ]; then
    sed -i "s/?>/\$ubntdiscovertime='150';\n\n?>/" /tmp/settings.inc
    fi
    #subway is dead, put here its repacement r01krypta
    sed -i "s/subway.funkfeuer.at/78.41.115.36/" /tmp/settings.inc
    sed -i "s/r01krypta.bb.funkfeuer.at/78.41.115.36/" /tmp/settings.inc
    #correct traceroute6 default
    sed -i "s/traceroute6_to='78.41.115.36'/traceroute6_to='2a02:60:35:492:1:ffff::1'/" /tmp/settings.inc
    # now restore it to correct folder
    cp /tmp/settings.inc /config/custom/www/settings.inc
    rm -f /tmp/settings.inc
fi
if [ ! -f "/config/custom/www/settings.inc" ]; then
    cp /config/custom/www/settings_default.inc /config/custom/www/settings.inc
fi
rm -f /config/custom/www/settings_default.inc

# establish config from default, if missing - avoid killing custom https-port setting
# damn! preinst deleted whole directory /config/custom, so previous config is always gone!
if [ ! -f "/config/custom/lighttpd/conf-enabled/10-ssl.conf" ]; then
    echo "Setup 10-ssl config file"
    cp /config/custom/lighttpd/conf-enabled/10-ssl_default.conf /config/custom/lighttpd/conf-enabled/10-ssl.conf
    if [ -f /tmp/custom_ports ]; then
        # what is in default config
        customhttpport=$(grep -i server.port /config/custom/lighttpd/conf-enabled/10-ssl.conf | awk -F'=' {'gsub(" ","",$2);print $2;'})
        customhttpsport=$(grep -iEn 'SERVER\["socket"\] == "0.0.0.0' /config/custom/lighttpd/conf-enabled/10-ssl.conf | awk -F':' {'gsub(" ","",$3);gsub("{","",$3);gsub("\"","",$3);print $3;'})
        echo "conf-file now "$customhttpport","$customhttpsport
        # what was in user config
        customhttpportnew=$(cat /tmp/custom_ports | awk {'print $1'})
        customhttpsportnew=$(cat /tmp/custom_ports | awk {'print $2'})
        echo "user before install "$customhttpportnew","$customhttpsportnew
        sed -i -r 's/server.port.{0,4}=.{0,4}'$customhttpport'/server.port = '$customhttpportnew'/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
        sed -i -r 's/\]:'$customhttpport'"/\]:'$customhttpportnew'"/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
        sed -i -r 's/:'$customhttpsport'"/:'$customhttpsportnew'"/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
        sed -i -r 's/:'$customhttpsport'\$1"/:'$customhttpsportnew'\$1"/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
        rm -f /tmp/custom_ports
    fi
fi
rm -f cp /config/custom/lighttpd/conf-enabled/10-ssl_default.conf

# 1.9.7aplha3 and later has no preinstalled php5 - remove php-setup from config
if [ ! -d /var/run/php5 ]; then
    echo "php5 missing, removing setup from .conf files"
    linenumber=$(grep -ni "conf-enabled/15-fastcgi-php.conf" /config/custom/lighttpd/lighttpd_custom.conf | awk -F: {'print $1'})
    sed -i $linenumber'd' /config/custom/lighttpd/lighttpd_custom.conf
    #rm /config/custom/lighttpd/conf-enabled/15-fastcgi-php.conf
    mv /config/custom/www/cgi-bin-status.php /config/custom/www/cgi-bin-status-dead.php
fi

# double check against conflicts with current orig server ports
customhttpport=$(grep -i server.port /config/custom/lighttpd/conf-enabled/10-ssl.conf | awk -F'=' {'gsub(" ","",$2);print $2;'})
customhttpsport=$(grep -iEn 'SERVER\["socket"\] == "0.0.0.0' /config/custom/lighttpd/conf-enabled/10-ssl.conf | awk -F':' {'gsub(" ","",$3);gsub("{","",$3);gsub("\"","",$3);print $3;'})
orighttpport=$(grep "http-port" /config/config.boot | awk {'print $2;'})
orighttpsport=$(grep "https-port" /config/config.boot | awk {'print $2;'})
echo "conf-file custom "$customhttpport","$customhttpsport
echo "orig-server actual "$orighttpport","$orighttpsport
if [ "$orighttpport" == "$customhttpport" ]; then
    if [ "$orighttpport" == "80" ]; then
        # this happens on initial install, so for this case move orig-server to http:81
        echo "Changing orig ports via command wrapper"
        cmd="/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper"
tfile=$(mktemp)
(
$cmd begin
ret=0
if [ $ret == 0 ]; then
    $cmd set service gui http-port 81 || ret=1
fi
if [ $ret == 0 ]; then
    $cmd commit || ret=1
fi
if [ $ret == 0 ]; then
    $cmd save || ret=1
fi
$cmd end
exit $ret
) >$tfile 2>&1
        ret=$?
        output=$(cat $tfile)
        rm -f $tfile
        echo $output
     #  orighttpport=$(grep "http-port" /config/config.boot | awk {'print $2;'})
     #  if [ "$orighttpport" == "80" ]; then
     #      echo "Changing port 80 to 81 failed, trying port_81.sh"
     #      sudo /config/scripts/port_81.sh
     #      orighttpport=$(grep "http-port" /config/config.boot | awk {'print $2;'})
     #      if [ "$orighttpport" == "80" ]; then
     #          echo "Changing port 80 to 81 failed, trying port_81w.sh"
     #          sudo /config/scripts/port_81w.sh
     #          #WTF? 
     #          orighttpport=$(grep "http-port" /config/config.boot | awk {'print $2;'})
     #          if [ "$orighttpport" == "80" ]; then
     #              echo "Changing port 80 to 81 failed, using at-now port_81s.sh"
     #              sudo at now -f /config/scripts/port_81s.sh
     #              #waiting 15sec
     #              echo -n "after 15 seconds"
     #              sleep 15
     #              echo "the orig-port is "$(grep "http-port" /config/config.boot | awk {'print $2;'})
     #          fi
     #      fi
     #  fi
    else
        customhttpport=$(($orighttpport +1))
        sed -i -r 's/server.port.{0,4}=.{0,4}'$orighttpport'/server.port = '$customhttpport'/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
        sed -i -r 's/\]:'$orighttpport'"/\]:'$customhttpport'"/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
    fi
fi
if [ "$orighttpsport" == "$customhttpsport" ]; then
    if   [ "$orighttpsport" == "443"]; then
        customhttpsport="8443"
    elif [ "$orighttpsport" == "8443"]; then
        customhttpsport="443"
    else
        customhttpsport=$(($orighttpsport +1))
    fi
    sed -i -r 's/:'$orighttpsport'"/:'$customhttpsport'"/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
    sed -i -r 's/:'$orighttpsport'\$1"/:'$customhttpsport'\$1"/' /config/custom/lighttpd/conf-enabled/10-ssl.conf
fi

echo "Debug -- Final Port settings to launch"
customhttpport=$(grep -i server.port /config/custom/lighttpd/conf-enabled/10-ssl.conf | awk -F'=' {'gsub(" ","",$2);print $2;'})
customhttpsport=$(grep -iEn 'SERVER\["socket"\] == "0.0.0.0' /config/custom/lighttpd/conf-enabled/10-ssl.conf | awk -F':' {'gsub(" ","",$3);gsub("{","",$3);gsub("\"","",$3);print $3;'})
orighttpport=$(grep "http-port" /config/config.boot | awk {'print $2;'})
orighttpsport=$(grep "https-port" /config/config.boot | awk {'print $2;'})
echo "conf-file custom "$customhttpport","$customhttpsport
echo "orig-server actual "$orighttpport","$orighttpsport

# start with permissions, ignore errors
chmod 755 /config/letsencrypt/acme_tiny.py
chmod 755 /config/letsencrypt/letsrenew.sh
chmod 755 /config/letsencrypt/repair.sh
chmod 755 /config/letsencrypt/restartservers.sh
chmod 755 /config/custom/bin/ip2dns
chmod 755 /config/custom/www/status.py
chmod 755 /config/custom/versions.sh
chmod 755 /config/custom/connections.sh
chmod 755 /config/custom/loopairos.sh
chmod 755 /config/custom/getairos.sh
# fix erlachp permission issue with user "funkfeuer"
chmod 777 /config/custom/www/.well-known/acme-challenge

# reestablish server.pem with RSA key if possible
chmod +w /etc/lighttpd/server.pem
if [ -f "/config/letsencrypt/signed.crt" ] && [ ! $(stat -c %s /config/letsencrypt/signed.crt) -eq 0 ] &&
   [ -f "/config/letsencrypt/domain.key" ] && [ ! $(stat -c %s /config/letsencrypt/domain.key) -eq 0 ]
then
  cat /config/letsencrypt/signed.crt | tee /tmp/server.pem >/dev/null
  cat /config/letsencrypt/domain.key | tee -a /tmp/server.pem >/dev/null
  if [ $(sudo sha1sum /etc/lighttpd/server.pem | awk {'print $1'}) != $(sha1sum /tmp/server.pem | awk {'print $1'}) ]; then
    restart="A"
    echo "Put cert files to server.pem"
    cp /tmp/server.pem /etc/lighttpd/server.pem
  else
    echo "server.pem using LetsEncrypt already contains correct key,certificate"
  fi
  rm -f /tmp/server.pem
else 
  # if not, recover original server.pem if possible - but only if NEEDED!
  # lighttpd running with current server.pem?
  lightrunning=$(ps aux | grep "/usr/sbin/lighttpd -f /etc/lighttpd/lighttpd.conf" | grep -vc grep)
  if [ $lightrunning -eq 1 ]; then
    #if RUNNING:
    if [ $(sudo grep -E "\-BEGIN PRIVATE KEY\-|\-BEGIN CERTIFICATE\-" /etc/lighttpd/server.pem | wc -l) -eq 2 ]; then
      #2=default /wo LE --> save as backup/working
      echo "Saving current default server.pem file as backup..."
      cp /etc/lighttpd/server.pem /config/letsencrypt/original_server.pem
    else
      echo "lighttpd is running fine with non-default server.pem"
    fi
  elif [ -f "/config/letsencrypt/original_server.pem" ]; then
    #if NOT RUNNING
    if [ $(sudo grep -E "\-BEGIN " /etc/lighttpd/server.pem | wc -l) -ne 2 ] &&
       [ $(sudo sha1sum /etc/lighttpd/server.pem | awk {'print $1'}) != $(sha1sum /config/letsencrypt/original_server.pem | awk {'print $1'}) ]; then
      restart="B"
      echo "Recovering original server.pem file..."
      cp /config/letsencrypt/original_server.pem /etc/lighttpd/server.pem
    else
      echo "lighttpd not running, server.pem type not recognized"
    fi
  else
    #if NOT RUNNING and no pem backup
    echo "lighttpd not running, no backup server.pem found"
  fi
fi

## only if restart=1, in this case try to stop first
if [ "$restart" ]; then
    echo "Stopping original webserver"
    # stop EdgeOS original Webserver if running
    if [ -f "/var/run/lighttpd.pid" ]; then
            sudo /sbin/start-stop-daemon --stop --pidfile /var/run/lighttpd.pid
            if [ -f "/var/run/lighttpd.pid" ]; then
                    rm /var/run/lighttpd.pid
            fi
    fi
    echo "Fire up original webserver..."
    # start original EdgeOS webserver
    sudo /sbin/start-stop-daemon --start --quiet \
            --pidfile /var/run/lighttpd.pid \
            --exec /usr/sbin/lighttpd -- -f /etc/lighttpd/lighttpd.conf
    echo "Restart-Reason: "$restart >/tmp/do_lighttpd_restart
    echo "Restart-Reason: "$restart
fi

echo "Fire up custom webserver"
# start custom script webserver
sudo /sbin/start-stop-daemon --start --quiet \
        --pidfile /var/run/lighttpd_custom.pid \
        --exec /usr/sbin/lighttpd -- -f /config/custom/lighttpd/lighttpd_custom.conf

## calculate keys of not already there (could be done offline and in backgroud)
calcscript="/config/letsencrypt/calc.sh"
# an interrupted calculation (force-reboot) was already cleaned from preinst
# existing calc-script at this moment must be "active"
if [ -f $calcscript ]; then
    echo "Looks like calculation of keys is already in progress..."
else
    if [ ! -f "/config/letsencrypt/account.key" ] || [ $(stat -c %s /config/letsencrypt/account.key) -eq 0 ]; then
        echo "Schedule account-key generation..."
        echo "#!/bin/sh" >$calcscript
        echo "openssl genrsa 4096 | tee /config/letsencrypt/account_tmp.key" >>$calcscript
        echo "cp    /config/letsencrypt/account_tmp.key /config/letsencrypt/account.key"  >>$calcscript
        echo "rm -f /config/letsencrypt/account_tmp.key"  >>$calcscript
    fi
    if [ ! -f "/config/letsencrypt/domain.key" ] || [ $(stat -c %s /config/letsencrypt/domain.key) -eq 0 ]; then
        echo "Schedule domain-key generation..."
        if [ ! -f $calcscript ]; then
            echo "#!/bin/sh" >$calcscript
        fi
        echo "openssl genrsa 4096 | tee /config/letsencrypt/domain_tmp.key" >>$calcscript
        echo "cp    /config/letsencrypt/domain_tmp.key /config/letsencrypt/domain.key"  >>$calcscript
        echo "rm -f /config/letsencrypt/domain_tmp.key"  >>$calcscript
    fi
    if [ -f $calcscript ]; then
        echo "rm -f "$(dirname $calcscript)"/nohup.out"  >>$calcscript
        echo "rm -f "$(dirname $calcscript)"calc.sh"  >>$calcscript
        chmod 755 $calcscript
        echo "triggering openssl calculation in backgroud..."
        nohup $calcscript &
    fi
fi

# prepare ssh keys
if [ ! -f /config/letsencrypt/id_rsa ] && [ ! -f /config/letsencrypt/id_rsa.pub ]; then
  echo "preparnig ssh keys"
  ssh-keygen -C "$(hostname)" -f /config/letsencrypt/id_rsa -N ""
  if   [ -d /home/ubnt ]; then user=ubnt
  elif [ -d /home/funkfeuer ]; then user=funkfeuer
  else user=$(ls -1 /home | head -n 1)
  fi
  chown $user:users /config/letsencrypt/id_rsa
  chown $user:users /config/letsencrypt/id_rsa.pub
fi 

# after FW-update, ssh keys for root and for users are gone
# if exists, copy the keys back to users directories
# key to root user as well (needed for wizard)
if [ ! -d /root/.ssh ]; then
  mkdir /root/.ssh
fi
if [ ! -f /root/.ssh/id_rsa ] && [ ! -f /root/.ssh/id_rsa.pub ]; then
  cp /config/letsencrypt/id_rsa /root/.ssh/id_rsa
  cp /config/letsencrypt/id_rsa.pub /root/.ssh/id_rsa.pub
fi
# fuer alle admin-user bereitstellen
userlist=$(grep -E "^        user |^            level " /config/config.boot | sed 'N;s/\n/ /' | grep "level admin" | awk {'print $2'})
#userlist="ubnt"
for user in $userlist; do
  if [ -d /home/$user ] && [ ! -f /home/$user/.ssh/id_rsa ] && [ ! -f /home/$user/.ssh/id_rsa.pub ]; then
    if [ ! -d /home/$user/.ssh ]; then
      mkdir /home/$user/.ssh
    fi
    cp /config/letsencrypt/id_rsa /home/$user/.ssh/id_rsa
    cp /config/letsencrypt/id_rsa.pub /home/$user/.ssh/id_rsa.pub
    chown $user:users /home/$user/.ssh/id_rsa
    chown $user:users /home/$user/.ssh/id_rsa.pub
  fi
  [ $(grep -c "alias ll=" /home/$user/.profile) -eq 0 ] && echo "alias ll=\"ls -al\"" >>/home/$user/.profile
done
[ $(grep -c "alias ll=" /root/.profile) -eq 0 ] && echo 'echo "alias ll=\"ls -al\"" >>/root/.profile' | sudo at now

rm /config/scripts/port_81.sh
rm /config/scripts/port_81w.sh
rm /config/scripts/port_81s.sh
echo "postinst installation finished"

exit 0
